from selenium import webdriver
import os
import time
import urllib.request as ur

import cv2
import numpy as np
from PIL import Image
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.support.ui import Select


class Crack():
    def __init__(self):
        self.bg_image_path = 'G:/newTest/yyy/bg_image'
        self.block_image_path = 'G:/newTest/yyy/block_image'
        self.url_index = 'http://192.168.203.11:8008/cas/login?service=http://192.168.203.11:8008/shiro-cas'
        self.driver = webdriver.Chrome()
        # 进入主页、打开登录弹框、输入账号密码选择普通用户
        self.enter_index()
        # 获取两张图片
        self.bg_img_size = self.get_image()
        # 获取偏移量
        # self.distance = self.get_distance()
        # print(self.distance)
        # 按照偏移量移动滑块
        self.move_block()

    def enter_index(self):
        self.driver.get(self.url_index)
        elem = self.driver.find_element_by_id("login")
        elem.click()
        time.sleep(1)
        s1 = Select(self.driver.find_element_by_class_name('as-ww'))  # 实例化Select
        s1.select_by_value("pt")
        elem = self.driver.find_element_by_id("username")
        elem.send_keys('34011171175735X')
        elem = self.driver.find_element_by_id("password")
        elem.send_keys('a1234567')
        elem = self.driver.find_element_by_class_name("button.as-ww")
        elem.click()
        time.sleep(1)
        self.driver.find_element_by_class_name('as-pd10')

    def get_image(self):
        bg_image = self.driver.find_element_by_class_name('captcha_slider_image_background')
        block_image = self.driver.find_element_by_class_name('captcha_slider_image_slider')
        bg_image_url = bg_image.get_attribute('src')
        block_image_url = block_image.get_attribute('src')

        self.download_image(bg_image_url, self.bg_image_path)
        self.download_image(block_image_url, self.block_image_path)

        bg_img_location = bg_image.location
        bg_img_size = bg_image.size
        left, top, right, buttom = bg_img_location['x'], bg_img_location['y'], bg_img_location['x'] + bg_img_size['width'], bg_img_location['y'] + bg_img_size[
            'height']
        return bg_img_size

    def download_image(self, image_url, image_path):
        try:
            file_suffix = os.path.splitext(image_url)[1]
            filename = '{}{}'.format(image_path, file_suffix)
            ur.urlretrieve(image_url, filename = filename)
        except IOError as e:
            print(1, e)

    def get_distance(self):
        bg_image = self.bg_image_path + '.jpg'
        block_imgae = self.block_image_path + '.png'
        bg_image = Image.open(bg_image)
        block_imgae = Image.open(block_imgae)
        bg_image_mask = bg_image.convert("RGBA")
        block_imgae_mask = block_imgae.convert("RGBA")

        distance = 150
        for w in range(1, bg_image_mask.size[0] - 1):
            for h in range(1, bg_image_mask.size[1] - 1):
                print(bg_image_mask.getpixel((w, h)))

        return distance

    def move_block(self):
        count = 0;
        for i in range(1000):
            try:
                block = self.driver.find_element_by_class_name("captcha_slider_bar")
                # time.sleep(1)
                action = ActionChains(self.driver)
                action.click_and_hold(block).perform()  # perform()用来执行ActionChains中存储的行为
                action.reset_actions()
                action.move_by_offset(150, 0).perform()  # 移动滑块
                # time.sleep(0.5)
                ActionChains(self.driver).release().perform()
                time.sleep(0.2)
                count += 1
            except:
                print("登录成功")
                break;
        print(count)

    def get_distance(bkg, blk):
        block = cv2.imread(blk, 0)
        template = cv2.imread(bkg, 0)
        cv2.imwrite('template.jpg', template)
        cv2.imwrite('block.jpg', block)
        block = cv2.imread('block.jpg')
        block = cv2.cvtColor(block, cv2.COLOR_BGR2GRAY)
        block = abs(255 - block)
        cv2.imwrite('block.jpg', block)
        block = cv2.imread('block.jpg')
        template = cv2.imread('template.jpg')
        result = cv2.matchTemplate(block, template, cv2.TM_CCOEFF_NORMED)
        x, y = np.unravel_index(result.argmax(), result.shape)
        # 这里就是下图中的绿色框框
        cv2.rectangle(template, (y + 20, x + 20), (y + 136 - 25, x + 136 - 25), (7, 249, 151), 2)
        # 之所以加20的原因是滑块的四周存在白色填充
        print('x坐标为：%d' % (y + 20))
        if y + 20 < 450:
            elem = driver.find_element_by_xpath('//*[@id="reload"]/div')
            sleep(1)
            elem.click()
            bkg, blk = get_image(driver)
            y, template = get_distance(bkg, blk)
        return y, template

crack = Crack()




